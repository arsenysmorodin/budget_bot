import { Telegraf } from "telegraf";
import dotenv from "dotenv";

dotenv.config();
const bot = new Telegraf(process.env.BOT_TOKEN || "");

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ .env
const USERS = {
  [Number(process.env.ARSENY_ID)]: "ARSENY",
  [Number(process.env.LERA_ID)]: "LERA",
};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(ctx: any) {
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
    reply_markup: {
      keyboard: [["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"], ["–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"], ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"]],
      resize_keyboard: true,
    },
  });
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
const EXPENSE_CATEGORIES = [
  ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"],
  ["–ü–æ–¥–ø–∏—Å–∫–∏", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
  ["–î–æ–º", "–ó–¥–æ—Ä–æ–≤—å–µ"],
  ["–î—Ä—É–≥–æ–µ"],
];

const INCOME_CATEGORIES = [
  ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫"],
  ["–ö—ç—à–±–µ–∫", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
  ["–ü—Ä–æ–¥–∞–∂–∏", "–î—Ä—É–≥–æ–µ"],
];

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface UserState {
  step:
    | "idle"
    | "expense_amount"
    | "expense_category"
    | "income_amount"
    | "income_category";
  operation: {
    type?: "expense" | "income";
    amount?: number;
    category?: string;
  };
}

const userStates: Record<number, UserState> = {};

// –°—Ç–∞—Ä—Ç
bot.start((ctx) => {
  const username = USERS[ctx.from?.id || 0] || ctx.from?.first_name;
  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}!`);
  showMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on("text", (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  if (!userStates[userId]) {
    userStates[userId] = { step: "idle", operation: {} };
  }

  const state = userStates[userId];
  const text = ctx.message.text;

  switch (state.step) {
    case "idle":
      if (text === "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥") {
        state.step = "expense_amount";
        state.operation = { type: "expense" };
        return ctx.reply("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞?");
      }

      if (text === "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥") {
        state.step = "income_amount";
        state.operation = { type: "income" };
        return ctx.reply("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞?");
      }

      if (text === "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞") {
        return ctx.reply("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.");
      }

      break;

    // --- –†–ê–°–•–û–î ---
    case "expense_amount": {
      const expenseAmount = parseFloat(text.replace(",", "."));
      if (isNaN(expenseAmount)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
      state.operation.amount = expenseAmount;
      state.step = "expense_category";
      return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", {
        reply_markup: { keyboard: EXPENSE_CATEGORIES, resize_keyboard: true },
      });
    }

    case "expense_category": {
      state.operation.category = text;
      ctx.reply(
        `‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–°—É–º–º–∞: ${state.operation.amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.operation.category}`
      );
      state.step = "idle";
      state.operation = {};
      return showMainMenu(ctx);
    }

    // --- –î–û–•–û–î ---
    case "income_amount": {
      const incomeAmount = parseFloat(text.replace(",", "."));
      if (isNaN(incomeAmount)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
      state.operation.amount = incomeAmount;
      state.step = "income_category";
      return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", {
        reply_markup: { keyboard: INCOME_CATEGORIES, resize_keyboard: true },
      });
    }

    case "income_category": {
      state.operation.category = text;
      ctx.reply(
        `üí∞ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–°—É–º–º–∞: ${state.operation.amount}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.operation.category}`
      );
      state.step = "idle";
      state.operation = {};
      return showMainMenu(ctx);
    }
  }

  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
});

bot.launch().then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));
