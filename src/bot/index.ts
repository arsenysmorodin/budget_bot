import { Telegraf } from "telegraf";
import dotenv from "dotenv";
import db from "../db/index";

dotenv.config();
const bot = new Telegraf(process.env.BOT_TOKEN || "");

const USERS: Record<number, string> = {
  [Number(process.env.ARSENY_ID)]: "ARSENY",
  [Number(process.env.LERA_ID)]: "LERA",
};

// --- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
function showMainMenu(ctx: any) {
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
    reply_markup: {
      keyboard: [["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"], ["–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"], ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"]],
      resize_keyboard: true,
    },
  });
}

// --- —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
interface UserState {
  step:
    | "idle"
    | "expense_amount"
    | "expense_category"
    | "income_amount"
    | "income_category";
  operation: {
    type?: "expense" | "income";
    amount?: number;
    category?: string;
  };
}
const userStates: Record<number, UserState> = {};

// --- —Å—Ç–∞—Ä—Ç ---
bot.start(async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  const username = USERS[userId] || ctx.from?.first_name;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  const getUser = db.prepare("SELECT * FROM users WHERE id = ?").get(userId);
  if (!getUser) {
    db.prepare("INSERT INTO users (id, username) VALUES (?, ?)").run(
      userId,
      username
    );
  }

  ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}!`);
  showMainMenu(ctx);
});

// --- —Ç–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ---
interface Row {
  type: "income" | "expense";
  amount: number;
  category: string;
  date: string;
}

// --- –ª–æ–≥–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π ---
bot.on("text", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  if (!userStates[userId]) {
    userStates[userId] = { step: "idle", operation: {} };
  }

  const state = userStates[userId];
  const text = ctx.message.text;

  switch (state.step) {
    // --- –≥–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
    case "idle":
      if (text === "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥") {
        state.step = "expense_amount";
        state.operation = { type: "expense" };
        return ctx.reply("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞?");
      }

      if (text === "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥") {
        state.step = "income_amount";
        state.operation = { type: "income" };
        return ctx.reply("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞?");
      }

      if (text === "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞") {
        const rows = db
          .prepare("SELECT * FROM operations WHERE user_id = ?")
          .all(userId) as Row[];

        const income = rows
          .filter((r) => r.type === "income")
          .reduce((a, b) => a + b.amount, 0);
        const expense = rows
          .filter((r) => r.type === "expense")
          .reduce((a, b) => a + b.amount, 0);
        const balance = income - expense;

        return ctx.reply(
          `üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n–î–æ—Ö–æ–¥: ${income} ‚ÇΩ\n–†–∞—Å—Ö–æ–¥: ${expense} ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`
        );
      }
      break;

    // --- —Ä–∞—Å—Ö–æ–¥—ã ---
    case "expense_amount": {
      const amount = parseFloat(text.replace(",", "."));
      if (isNaN(amount)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
      state.operation.amount = amount;
      state.step = "expense_category";

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
      const categories = db
        .prepare("SELECT name FROM expense_categories ORDER BY name")
        .all()
        .map((r: any) => r.name);

      if (categories.length === 0) {
        return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö):");
      }

      return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", {
        reply_markup: {
          keyboard: categories.map((c) => [c]),
          resize_keyboard: true,
        },
      });
    }

    case "expense_category": {
      state.operation.category = text;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      db.prepare(
        "INSERT INTO operations (user_id, type, amount, category) VALUES (?, ?, ?, ?)"
      ).run(
        userId,
        "expense",
        state.operation.amount,
        state.operation.category
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
      db.prepare(
        "INSERT OR IGNORE INTO expense_categories (name) VALUES (?)"
      ).run(text);

      ctx.reply(
        `‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n${state.operation.amount} ‚ÇΩ ‚Äî ${state.operation.category}`
      );

      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
      userStates[userId] = { step: "idle", operation: {} };
      return showMainMenu(ctx);
    }

    // --- –¥–æ—Ö–æ–¥—ã ---
    case "income_amount": {
      const amount = parseFloat(text.replace(",", "."));
      if (isNaN(amount)) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
      state.operation.amount = amount;
      state.step = "income_category";

      const INCOME_CATEGORIES = [
        ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫"],
        ["–ö—ç—à–±–µ–∫", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"],
        ["–ü—Ä–æ–¥–∞–∂–∏", "–î—Ä—É–≥–æ–µ"],
      ];

      return ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", {
        reply_markup: { keyboard: INCOME_CATEGORIES, resize_keyboard: true },
      });
    }

    case "income_category": {
      state.operation.category = text;

      db.prepare(
        "INSERT INTO operations (user_id, type, amount, category) VALUES (?, ?, ?, ?)"
      ).run(userId, "income", state.operation.amount, state.operation.category);

      ctx.reply(
        `üí∞ –î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n${state.operation.amount} ‚ÇΩ ‚Äî ${state.operation.category}`
      );

      userStates[userId] = { step: "idle", operation: {} };
      return showMainMenu(ctx);
    }
  }

  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.");
});

bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å SQLite!"));
